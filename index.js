const TelegramBot = require("node-telegram-bot-api");
const express = require("express");

const app = express();
const TOKEN = "7822342149:AAErV0ppnFOAOFWIAfOJUqiykHG5PBfs_eU";
const bot = new TelegramBot(TOKEN, { webHook: true });

const WEBHOOK_URL = `https://telegram-bot-anu.vercel.app/api/webhook`;
bot.setWebHook(WEBHOOK_URL);

const userNames = {};

app.use(express.json());

app.post("/api/webhook", (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error("Error processing webhook:", error);
    res.sendStatus(500);
  }
});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const message = `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç –°–ö–ê–ô!

–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –†–ö–ë –∏–º.–ù.–ê.–°–µ–º–∞—à–∫–æ.

–ö–∞–∫ —è –º–æ–≥—É –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üëá
`;
  const photoPath = "https://telegram-bot-anu.vercel.app/photo.jpg";
  bot.sendPhoto(chatId, photoPath, { caption: message });
});

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  if (msg.text === "/start") return;

  const userName = msg.text;
  userNames[chatId] = userName;

  bot.sendMessage(
    chatId,
    `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${userName}! –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—é –≤ –∞–º–±—É–ª–∞—Ç–æ—Ä–Ω–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏?`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–î–∞", callback_data: "yes" },
            { text: "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data: "no" },
          ],
        ],
      },
    }
  );
});

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const userName = userNames[chatId] || "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

  if (query.data === "yes") {
    const message = `
${userName}, –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏ –≤ –†–ö–ë –∏–º.–ù.–ê.–°–µ–º–∞—à–∫–æ, —Å–æ–≥–ª–∞—Å–æ–≤–∞–≤ —Å –≤–∞—à–∏–º –ª–µ—á–∞—â–∏–º –≤—Ä–∞—á–æ–º. –í–æ—Ç –ø–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ:

1. –ü–∞—Å–ø–æ—Ä—Ç, –°–ù–ò–õ–°, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–ª–∏—Å.
2. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
    `;
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data: "register" },
            { text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel" },
          ],
        ],
      },
    });
  } else if (query.data === "register") {
    bot.sendMessage(
      chatId,
      "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n+79025313017",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data: "location" }],
            [{ text: "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data: "restart" }],
          ],
        },
      }
    );
  } else if (query.data === "location") {
    bot.sendMessage(
      chatId,
      "–†–ö–ë –∏–º. –ù.–ê. –°–µ–º–∞—à–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n\n–≥. –£–ª–∞–Ω-–£–¥—ç, –£–ª. –ü–∞–≤–ª–æ–≤–∞, 12, –∫–æ—Ä–ø—É—Å 1",
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–û—Ç–∫—Ä—ã—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ 2Gis",
                url: "https://2gis.ru/ulanude/firm/70000001041029095",
              },
            ],
          ],
        },
      }
    );
  } else if (query.data === "cancel" || query.data === "restart") {
    bot.sendMessage(chatId, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start.");
  }

  bot.answerCallbackQuery(query.id);
});

module.exports = app;
