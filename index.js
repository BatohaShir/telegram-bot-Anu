const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const path = require("path");

const app = express();
const TOKEN = "7822342149:AAErV0ppnFOAOFWIAfOJUqiykHG5PBfs_eU";
const bot = new TelegramBot(TOKEN, { webHook: true });

const PORT = process.env.PORT || 3000;

const WEBHOOK_URL = `https://telegram-bot-anu.onrender.com/api/webhook`;

bot.setWebHook(WEBHOOK_URL);

const userNames = {};
const messageHistory = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞

app.use(express.json());

app.post("/api/webhook", (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.use(express.static(path.join(__dirname, "public")));

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
function saveMessage(chatId, messageId) {
  if (!messageHistory[chatId]) {
    messageHistory[chatId] = [];
  }
  messageHistory[chatId].push(messageId);
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
async function deleteMessageHistory(chatId) {
  if (messageHistory[chatId]) {
    for (const messageId of messageHistory[chatId]) {
      try {
        await bot.deleteMessage(chatId, messageId);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, error.message);
      }
    }
    messageHistory[chatId] = []; // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
  }
}

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const message = `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç –°–ö–ê–ô! ü§ñ

–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–º–±—É–ª–∞—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏ –†–ö–ë –∏–º.–ù.–ê.–°–µ–º–∞—à–∫–æ.

–ö–∞–∫ —è –º–æ–≥—É –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üëá
`;
  const photoPath = path.join(__dirname, "photo.jpg");
  const sentMessage = await bot.sendPhoto(chatId, photoPath, { caption: message });
  saveMessage(chatId, sentMessage.message_id);
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;

  if (msg.text === "/start") return;

  const userName = msg.text;
  userNames[chatId] = userName;

  const sentMessage = await bot.sendMessage(
    chatId,
    `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${userName}! üòä –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—é –≤ –∞–º–±—É–ª–∞—Ç–æ—Ä–Ω–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏?`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ –î–∞", callback_data: "yes" },
            { text: "‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data: "no" },
          ],
        ],
      },
    }
  );
  saveMessage(chatId, sentMessage.message_id);
});

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const userName = userNames[chatId] || "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

  if (query.data === "yes") {
    const message = `
${userName}, –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏ –≤ –†–ö–ë –∏–º.–ù.–ê.–°–µ–º–∞—à–∫–æ, —Å–æ–≥–ª–∞—Å–æ–≤–∞–≤ —Å –≤–∞—à–∏–º –ª–µ—á–∞—â–∏–º –≤—Ä–∞—á–æ–º. –í–æ—Ç –ø–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ:
...
`;
    const sentMessage = await bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data: "register" },
            { text: "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data: "restart" },
          ],
        ],
      },
    });
    saveMessage(chatId, sentMessage.message_id);
  } else if (query.data === "no") {
    const sentMessage = await bot.sendMessage(
      chatId,
      `${userName}, –º–Ω–µ –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –í–∞–º –ø–æ–º–æ—á—å! üòä\n\n–ñ–µ–ª–∞—é –í–∞–º –∑–¥–æ—Ä–æ–≤—å—è –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è! üíê`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data: "restart" }],
          ],
        },
      }
    );
    saveMessage(chatId, sentMessage.message_id);
  } else if (query.data === "register") {
    const sentMessage = await bot.sendMessage(
      chatId,
      "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\nüìû +79025313017\n\n–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üìã",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data: "location" }],
            [{ text: "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data: "restart" }],
          ],
        },
      }
    );
    saveMessage(chatId, sentMessage.message_id);
  } else if (query.data === "location") {
    const sentMessage = await bot.sendMessage(
      chatId,
      "üìç –†–ö–ë –∏–º. –ù.–ê. –°–µ–º–∞—à–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n\n**–≥. –£–ª–∞–Ω-–£–¥—ç, –£–ª. –ü–∞–≤–ª–æ–≤–∞, 12, –∫–æ—Ä–ø—É—Å 1**",
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ 2Gis",
                url: "https://2gis.ru/ulanude/firm/70000001041029095?m=107.613031%2C51.805952%2F18.47",
              },
            ],
            [{ text: "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data: "restart" }],
          ],
        },
      }
    );
    saveMessage(chatId, sentMessage.message_id);
  } else if (query.data === "restart") {
    // –£–¥–∞–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    await deleteMessageHistory(chatId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
    const message = `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç –°–ö–ê–ô! ü§ñ

–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–º–±—É–ª–∞—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏ –†–ö–ë –∏–º.–ù.–ê.–°–µ–º–∞—à–∫–æ.

–ö–∞–∫ —è –º–æ–≥—É –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üëá
`;
    const photoPath = path.join(__dirname, "photo.jpg");
    const sentMessage = await bot.sendPhoto(chatId, photoPath, { caption: message });
    saveMessage(chatId, sentMessage.message_id);
  }

  bot.answerCallbackQuery(query.id);
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

module.exports = app;
